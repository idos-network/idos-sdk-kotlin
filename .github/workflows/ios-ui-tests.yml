name: iOS UI Tests

on:
  workflow_dispatch:

jobs:
  test:
    name: iOS UI Tests
    runs-on: macos-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create .env for tests from GitHub Secrets
        shell: bash
        env:
            MNEMONIC_WORDS: ${{ secrets.MNEMONIC_WORDS }}
            PASSWORD: ${{ secrets.PASSWORD }}
        run: |
            # Write .env used by dotenv-kotlin in tests. Values come from repository secrets.
            cat > .env <<EOF
            MNEMONIC_WORDS=$MNEMONIC_WORDS
            PASSWORD=$PASSWORD
            EOF
            echo ".env created with test credentials"

      - name: Download latest SDK framework
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          LATEST_TAG=$(gh release view --json tagName -q .tagName)
          echo "Using SDK version: $LATEST_TAG"
          mkdir -p shared/build/xcode-frameworks/Debug/iphonesimulator
          cd shared/build/xcode-frameworks/Debug
          gh release download $LATEST_TAG --pattern "idos_sdk.xcframework.zip"
          unzip -q idos_sdk.xcframework.zip
          cp -R idos_sdk.xcframework/ios-arm64-simulator/idos_sdk.framework iphonesimulator/

      - name: Add xcbeautify
        run: |
          brew install xcbeautify

      - name: Build for testing
        run: |
          cd iosApp
          set -o pipefail && xcodebuild build-for-testing \
            -project iosApp.xcodeproj \
            -scheme iosAppUITests \
            -destination 'platform=iOS Simulator,name=iPhone 16' \
            -derivedDataPath DerivedData | xcbeautify

      - name: Run UI tests
        run: |
          cd iosApp
          set -o pipefail && xcodebuild test-without-building \
            -project iosApp.xcodeproj \
            -scheme iosAppUITests \
            -destination 'platform=iOS Simulator,name=iPhone 16' \
            -derivedDataPath DerivedData \
            -resultBundlePath TestResults | xcbeautify

      - uses: kishikawakatsumi/xcresulttool@v1
        with:
          path: iosApp/TestResults.xcresult
        if: success() || failure()

#      - name: Convert test results to JUnit
#        if: always()
#        run: |
#          brew install chargepoint/xcparse/xcparse
#          cd iosApp
#          xcparse junit TestResults.xcresult --output ./test-results
#
#      - name: Publish Test Report
#        if: always()
#        uses: mikepenz/action-junit-report@v4
#        with:
#          report_paths: 'iosApp/test-results/junit.xml'
#          require_tests: false

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-test-results
          path: iosApp/TestResults.xcresult
          if-no-files-found: ignore
