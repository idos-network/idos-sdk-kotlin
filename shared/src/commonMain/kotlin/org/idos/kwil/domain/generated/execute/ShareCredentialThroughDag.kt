// This file is generated by the generator. Do not edit it manually.
// check github.com/idos-networks/idos-schema

package org.idos.kwil.domain.generated.execute

import org.idos.kwil.domain.generated.ExecuteAction
import org.idos.kwil.serialization.KwilType
import org.idos.kwil.domain.PositionalParams
import org.idos.kwil.domain.PositionalTypes
import org.idos.kwil.types.UuidString

data class ShareCredentialThroughDagParams(
    val id: UuidString,
    val userId: UuidString,
    val issuerAuthPublicKey: String,
    val encryptorPublicKey: String,
    val content: String,
    val contentHash: String,
    val publicNotes: String,
    val publicNotesSignature: String,
    val broaderSignature: String,
    val originalCredentialId: UuidString,
    val dagOwnerWalletIdentifier: String,
    val dagGranteeWalletIdentifier: String,
    val dagLockedUntil: Int,
    val dagSignature: String,
)

object ShareCredentialThroughDag : ExecuteAction<ShareCredentialThroughDagParams> {
    override val name: String = "share_credential_through_dag"
    override val namespace: String = "main"
    override val description: String = "Share a credential through the DAG"

    override val positionalTypes: PositionalTypes =
        listOf(
            KwilType.Uuid(),
            KwilType.Uuid(),
            KwilType.Text(),
            KwilType.Text(),
            KwilType.Text(),
            KwilType.Text(),
            KwilType.Text(),
            KwilType.Text(),
            KwilType.Text(),
            KwilType.Uuid(),
            KwilType.Text(),
            KwilType.Text(),
            KwilType.Int(),
            KwilType.Text(),
        )

    override fun toPositionalParams(input: ShareCredentialThroughDagParams): PositionalParams =
        listOf(
            input.id.value,
            input.userId.value,
            input.issuerAuthPublicKey,
            input.encryptorPublicKey,
            input.content,
            input.contentHash,
            input.publicNotes,
            input.publicNotesSignature,
            input.broaderSignature,
            input.originalCredentialId.value,
            input.dagOwnerWalletIdentifier,
            input.dagGranteeWalletIdentifier,
            input.dagLockedUntil,
            input.dagSignature,
        )
}
